var fullUrl = window.location.origin;

var FULLURL="quotation";
///public_html/mobileandwebsitedevelopment.com/TERP/public/back-end/build


$('form').submit(function(){

    $(this).children('button[type=submit]').prop('disabled', true);

});



$.ajaxSetup({headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')}});

$( document ).ready(function() {

    $('.select2').select2();

});



$('.cancel').on('click',function(){

    const id = $(this).data('id');

    Swal.fire({

        title:"Cancel",text:"Do you want to cancel the Quotation ?",icon:"warning",showCancelButton:true,confirmButtonColor:"#DD6B55",showLoaderOnConfirm: true,

        preConfirm: () => {

            return fetch(fullUrl+'/quotation/cancel?id='+id)

            .then(response => response.json())

            .then(data => location.reload())

            .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})

        }

    });

})



$('.approve').on('click',function(){

    const id = $(this).data('id');

    Swal.fire({

        title:"Approve",text:"Do you want to approve the Quotation?",icon:"warning",showCancelButton:true,confirmButtonColor:"#5ae87d",showLoaderOnConfirm: true,

        preConfirm: () => {

            return fetch(fullUrl+'/quotation/approve?id='+id)

            .then(response => response.json())

            .then(data => location.reload())

            .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})

        }

    });

})



// $('.getOrder').on('click',function(){

//     const id = $(this).data('id');

//     Swal.fire({

//         title:"Issue Order",text:"Do you want to Issue Order?",icon:"warning",showCancelButton:true,confirmButtonColor:"#5ae87d",showLoaderOnConfirm: true,

//         preConfirm: () => {

//             return fetch(fullUrl+'/quotation/getOrder?id='+id)

//             .then(response => response.json())

//             .then(data => location.reload())

//             .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})

//         }

//     });

// })



var itf = $.ajax({url:FULLURL+'/getITF',method:'get',async:false,success:function(rs){ itf=rs }}).responseText;

var unit = $.ajax({url:FULLURL+'/getUnit',method:'get',async:false,success:function(data){ unit=data }}).responseText;

$(document).on('click','.add-row',function(){

    const currency = $('#currency').children("option:selected").text()

    var row = $('#sorted_table').find('tbody tr').last().data('id');

    var markup = '<tr id="row'+(row+1)+'" data-id="'+(row+1)+'"><td data-label="ITF"><select name="itf[]" id="itf'+(row+1)+'" class="form-control select_itf select2" style="width:100%">'+itf+'</select></td><td data-label="Quantity"><input type="number" class="form-control qty" name="quantity[]" step="0.01" min="0" placeholder="Enter quantity" onkeydown="myFunction('+(row+1)+')" value="" id="tqty'+(row+1)+'"><input type="hidden" class="ean_id" name="ean_id[]" placeholder="ean_id"><input type="hidden" class="ean_qty" name="ean_qty[]" placeholder="ean_qty"><input type="hidden" class="net_weight" name="net_weight[]" placeholder="net_weight"><input type="hidden" class="new_weight" name="new_weight[]" placeholder="new_weight"><input type="hidden" class="maxcbm" name="maxcbm[]" placeholder="maxcbm"><input type="hidden" class="maxpallet" name="maxpallet[]" placeholder="maxpallet"></td><td data-label="Unit"><select name="unitcount[]" id="unitcount'+(row+1)+'" class="form-control unitcount " style="width:100%">'+unit+'</select></td><td data-label="Number of Box"><input type="text" class="form-control number_box" name="number_box[]" value="" placeholder="" readonly></td><td data-label="NW"><input type="text" class="form-control nw" name="nw[]" value="" placeholder="" readonly><input type="hidden" class="form-control gw_weight" name="gw_weight[]" placeholder="gw_weight"><input type="hidden" class="form-control cbm" name="cbm[]" placeholder="cbm"><input type="hidden" class="form-control pallet" name="pallet[]" placeholder="pallet"><input type="hidden" class="form-control price_allocation" name="price_allocation[]" placeholder="price_allocation"><input type="hidden" class="form-control price_pallet_unit" name="price_pallet_unit[]" placeholder="price_pallet_unit"><input type="hidden" class="form-control itf_pallet_price" name="itf_pallet_price[]" placeholder="itf_pallet_price"><input type="hidden" class="form-control itf_clearance_price" name="itf_clearance_price[]" placeholder="itf_clearance_price"><input type="hidden" class="form-control itf_transport_price" name="itf_transport_price[]" placeholder="itf_transport_price"><input type="hidden" class="form-control itf_cost_price" name="itf_cost_price[]" placeholder="itf_cost_price"><input type="hidden" class="form-control itf_freight_rate" name="itf_freight_rate[]" placeholder="itf_freight_rate"><input type="hidden" class="form-control total_itf_cost" name="total_itf_cost[]" placeholder="total_itf_cost"></td><td data-label="Unit Price"><div class="input-group"><input class="form-control unit_price" type="text" name="unit_price[]" placeholder=""><div class="input-group-append"><span class="input-group-text currency_text">'+currency+'</span></div></div></td><td data-label="Profit"><input class="form-control profit" type="text" name="profit[]" placeholder="" readonly><input class="form-control fob" type="hidden" name="fob[]" placeholder="" readonly></td><td data-label="Action"><a href="javascript:" class="btn btn-danger delete-row" data-id="'+(row+1)+'" title="Delete"><i class="far fa-trash-alt"></i></a></td></tr>';

    $("#sorted_table").append(markup);

    $('.select2').select2();

});



$(document).on('click','.delete-row',function(){

    const timing = $(this).data('timing');

    Swal.fire({

        title:"Delete",text:"Do you want to delete row ?",icon:"warning",showCancelButton:true,confirmButtonColor:"#DD6B55",showLoaderOnConfirm: true,

        preConfirm: () => {

            if(typeof undefined == typeof timing)

            {

                $(this).parent().parent().remove();

            }else{

                const id = $(this).data('id');

                $.ajax({

                    url: FULLURL+'/destroyITF',

                    method:'get',

                    data: {id:id},

                });

                $(this).parent().parent().remove();

            }

            const select_palletized = $('#select_pallet').val();

            const select_clearance = $('#select_clearance').val();

            let total_box = 0;

            let total_nw = 0;

            let total_gw = 0;

            let total_cbm = 0;

            let palletized = 0;

            $.each($('input.number_box'),function(){

                const box = parseFloat($(this).val());

                total_box += box;

            })

            $('#span_box').html(total_box);

            $('#total_box').val(total_box);



            $.each($('input.nw'),function(){

                const nw = parseFloat($(this).val());

                total_nw += nw;

            })

            $('#span_nw').html(total_nw);

            $('#total_nw').val(total_nw);

            if(select_palletized == 'yes'){

                $('#hid_palletizad').attr('style','display:inline');

            if($('#total_box').val() != ''){

                    $.each($('input.pallet'),function(){

                        const pallet = parseFloat($(this).val());

                        palletized += pallet;

                        const one = pallet/palletized;

                        $('#palletized').val(Math.ceil(palletized));

                        $('#span_palletized').html(Math.ceil(palletized));

                        const total_pallet = parseFloat($('#palletized').val());

                        const price_pallet = parseFloat($('#price_pallet').val());

                        const two = total_pallet*price_pallet;

                        const price_allocation = parseFloat(one)*parseFloat(two);

                        $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));

                        const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();

                        const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();

                        const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);

                        $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));

            

                        const palletized_price = (price_pallet*total_pallet)/palletized;

                        $('#palletized_price').val(palletized_price.toFixed(4));

                    })

            

                    $.each($('input.gw_weight'),function()

                    {

                        const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);

                        const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

                        const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))

                        $(this).val(gw_weight.toFixed(2));



                    $(this).parent().parent().find('td:nth-child(5) input.itf_GW').val(gw.toFixed(2));

                    



                    })

            

                    $.each($('input.itf_pallet_price'),function(){

                        const palletized_price = parseFloat($('#palletized_price').val());

                        const pallet = parseFloat($(this).parent().find('input.pallet').val());

                        const itf_pallet_price = pallet*palletized_price;

                        $(this).val(itf_pallet_price.toFixed(4));

                    })

            

                    $.each($('input.gw_weight'),function(){

                        const gw_weight = parseFloat($(this).val());

                        total_gw += gw_weight;

                    })

                    // const weight_pallet = parseFloat($('#weight_pallet').val());

                    // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));

                    $('#span_gw').html(total_gw.toFixed(2));

                    $('#total_gw').val(total_gw.toFixed(2));

                    

                    $.each($('input.cbm'),function(){

                        const cbm = parseFloat($(this).val());

                        total_cbm += cbm;

                    })

                    const cbm_pallet = parseFloat($('#cbm_pallet').val());

                    const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));

                    $('#span_cbm').html(cal_cbm.toFixed(2));

                    $('#total_cbm').val(cal_cbm.toFixed(2));

                }

            }else{

                $('#hid_palletizad').attr('style','display:none');

                if($('#total_box').val() != ''){

                    $.each($('input.gw_weight'),function(){

                    const gw_weight = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

                    $(this).parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));

                    })

                    

                    $.each($('input.maxpallet'),function(){

                        $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);

                        $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);

                        $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);

                    })



                    $.each($('input.gw_weight'),function(){

                        const gw_weight = parseFloat($(this).val());

                        total_gw += gw_weight;

                    })

                    $('#span_gw').html(total_gw);

                    $('#total_gw').val(total_gw);



                    $.each($('input.cbm'),function(){

                        const cbm = parseFloat($(this).val());

                        total_cbm += cbm;

                    })

                    $('#span_cbm').html(total_cbm.toFixed(2));

                    $('#total_cbm').val(total_cbm.toFixed(2));

                }

            }

        }

    });

});



$(document).on('change','#client',function(){

    var $this = $(this);

    const id = $this.val();

    $.get(FULLURL+'/getShip?id='+id)

    .done(function(data){

        // console.log(data)

        $('#shipto').empty();

        $('#shipto').append(data);

    })

    $.get(FULLURL+'/getAir?shipto_id=')

    .done(function(data){

        // console.log(data)

        $('#airport').empty();

        $('#airport').append(data.airport);

        $('#airline').empty();

        $('#airline').append(data.airline);

    })

})



$(document).on('change','#shipto',function(){

    var $this = $(this);

    const id = $this.val();

    $.get(FULLURL+'/getAir?shipto_id='+id)

    .done(function(data){

        // console.log(data)

        $('#airport').empty();

        $('#airport').append(data.airport);

        $('#airline').empty();

        $('#airline').append(data.airline);

    })

})



$(document).on('change','#airport',function(){

    var $this = $(this);

    const id = $this.val();

    if($this.val() != "")

    {

        $('#shipto').attr('disabled',true);

        $.get(FULLURL+'/getAir?airport_id='+id)

        .done(function(data){

            $('#airline').empty();

            $('#airline').append(data.airline);

        })

    }else{

        $('#shipto').attr('disabled',false);

        $.get(FULLURL+'/getAir?airport_id='+id)

        .done(function(data){

            $('#airline').empty();

            $('#airline').append(data.airline);

        })

    }

})



$(document).on('change','#currency',function(){

    if($(this).val() == 1){

        $('#ex_rate').val(1);

    }else{

        $('#ex_rate').val(null);

    }

    $('.currency_text').text($(this).children("option:selected").text());

})



$(document).on('change','#select_pallet',function(){

    var $this = $(this);

    const val = $this.val();

    let total_box = 0;

    let total_nw = 0;

    let total_gw = 0;

    let total_cbm = 0;

    let palletized = 0;

    if(val == 'yes')

    {

        $('#hid_palletizad').attr('style','display:inline');

        if($('#total_box').val() != ''){

            $.each($('input.pallet'),function(){

                const pallet = parseFloat($(this).val());

                palletized += pallet;

                const one = pallet/palletized;

                $('#palletized').val(Math.ceil(palletized));

                $('#span_palletized').html(Math.ceil(palletized));

                const total_pallet = parseFloat($('#palletized').val());

                const price_pallet = parseFloat($('#price_pallet').val());

                const two = total_pallet*price_pallet;

                const price_allocation = parseFloat(one)*parseFloat(two);

                $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));

                const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();

                const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();

                const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);

                $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));

    

                const palletized_price = (price_pallet*total_pallet)/palletized;

                $('#palletized_price').val(palletized_price.toFixed(4));

            })

    

            $.each($('input.gw_weight'),function(){

                const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);

                const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

                const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))

                $(this).val(gw_weight.toFixed(2));

            })

    

            $.each($('input.itf_pallet_price'),function()

            {

                const palletized_price = parseFloat($('#palletized_price').val());

                const pallet = parseFloat($(this).parent().find('input.pallet').val());

                const itf_pallet_price = pallet*palletized_price;

                $(this).val(itf_pallet_price.toFixed(4));

            })

    

            $.each($('input.gw_weight'),function(){

                const gw_weight = parseFloat($(this).val());

                total_gw += gw_weight;

            })

            // const weight_pallet = parseFloat($('#weight_pallet').val());

            // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));

            $('#span_gw').html(total_gw.toFixed(2));

            $('#total_gw').val(total_gw.toFixed(2));

            

            $.each($('input.cbm'),function(){

                const cbm = parseFloat($(this).val());

                total_cbm += cbm;

            })

            const cbm_pallet = parseFloat($('#cbm_pallet').val());

            const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));

            $('#span_cbm').html(cal_cbm.toFixed(2));

            $('#total_cbm').val(cal_cbm.toFixed(2));

        }

    }else{

        $('#hid_palletizad').attr('style','display:none');

        if($('#total_box').val() != ''){

            $.each($('input.gw_weight'),function(){

            const gw_weight = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

            $(this).parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));

            })

            

            $.each($('input.maxpallet'),function(){

                $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);

                $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);

                $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);

            })



            $.each($('input.gw_weight'),function(){

                const gw_weight = parseFloat($(this).val());

                total_gw += gw_weight;

            })

            $('#span_gw').html(total_gw);

            $('#total_gw').val(total_gw);



            $.each($('input.cbm'),function(){

                const cbm = parseFloat($(this).val());

                total_cbm += cbm;

            })

            $('#span_cbm').html(total_cbm.toFixed(2));

            $('#total_cbm').val(total_cbm.toFixed(2));

        }

    }

})



$(document).on('change','#select_clearance',function(){

    var $this = $(this);

    const id = $this.val();

    if($this.val() != ''){

        $.get(FULLURL+'/getClearance?id='+id)

        .done(function(data){

            $('#clearance').val(data.clearance)

            $('#chamber').val(data.chamber)



            $('#clearanceN').val(data.charge)

            $('#chamberN').val(data.chamber)

            $('#certificationN').val(data.certificate)

            $('#extraN').val(data.extras)

            getPalatass();

        





        

        })

    }

})



$(document).on('change','#select_chamber',function(){

    var $this = $(this);

    const val = $this.val();

    if(val == 'yes'){

        const clearance = parseFloat($('#clearance').val());

        const chamber = parseFloat($('#chamber').val());

        const new_clearance = parseFloat(clearance)+parseFloat(chamber);

        $('#clearance').val(new_clearance);

    }else{

        const clearance = parseFloat($('#clearance').val());

        const chamber = parseFloat($('#chamber').val());

        const new_clearance = parseFloat(clearance)-parseFloat(chamber);

        $('#clearance').val(new_clearance);

    }

})



$(document).on('change','.select_itf',function(){

    var $this = $(this);

    const id = $this.val();

    let count = 0;

    $.each($('.select_itf'),function(){

        const val = $(this).val();

        if(id == val){

            count = count+1;

        }

    })

    if(count > 1){

        alert('มีรายการที่เลือกอยู่แล้ว / The item selected already exists.')

        $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');

        $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);

        $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);

        $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);

        $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);

        $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);

        $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);

    }else{

        if($this.val() != '')

        $.get(FULLURL+'/getVal?id='+id)

        .done(function(data){

            $this.parent().parent().find('td:nth-child(2) input.qty').attr('data-ean',data.ean_id);

            $this.parent().parent().find('td:nth-child(2) input.ean_id').val(data.ean_id);

            $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(data.qty);

            $this.parent().parent().find('td:nth-child(2) input.net_weight').val(data.net_weight);

            $this.parent().parent().find('td:nth-child(2) input.new_weight').val(data.new_weight);

            $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(data.maxcbm);

            $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(data.maxpallet);

            $this.parent().parent().find('td:nth-child(2) input.ean_ppITF').val(data.ean_ppITF);
            $this.parent().parent().find('td:nth-child(2) input.itfQty').val(data.itfQty);

            $this.parent().parent().find('td:nth-child(5) input.box_pallet').val(data.box_pallet);

           

            $this.parent().parent().find('td:nth-child(5) input.itf_GW').val(data.new_weight);

            $this.parent().parent().find('td:nth-child(5) input.box_weight').val(data.new_weight);

            // alert(data.new_weight)

            // console.log(data)





        })

    }

    $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);

    $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);

    $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);

    $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);

    $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);

    $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);

    $this.parent().parent().find('td:nth-child(2) input.qty').val(null);

    $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);

    $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);

    $this.parent().parent().find('td:nth-child(5) input.nw').val(null);

    $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);

    $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);

    $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);

    $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);

    $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);

    $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);

    $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);

    $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);

    $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);

    $this.parent().parent().find('td:nth-child(5) input.total_itf_cost').val(null);

    $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);

    $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);

    $this.parent().parent().find('td:nth-child(7) input.profit').val(null);

})







$(document).on('change','.unitcount',function(){  /* start point of calculation */

    var $this = $(this);

    const qty = $this.parent().parent().find('td:nth-child(2) input.qty').val();

    const itf_id = $this.parent().parent().find('td:nth-child(1) select.select_itf').val();

    const id = $this.val();

    const ean_id = $this.parent().parent().find('td:nth-child(2) input.ean_id').val().split(',');

    const count_ean_id = ean_id.length;

    const ean_qty = $this.parent().parent().find('td:nth-child(2) input.ean_qty').val();

    const net_weight = $this.parent().parent().find('input.net_weight').val();

    const itf_gw = $this.parent().parent().find('input.net_weight').val();

    const maxcbm = $this.parent().parent().find('input.maxcbm').val();

    const maxpallet = $this.parent().parent().find('input.maxpallet').val();

    const select_palletized = $('#select_pallet').val();

    const ex_rate = parseFloat($('#ex_rate').val());

     const ean_ppITF = $this.parent().parent().find('td:nth-child(2) input.ean_ppITF').val();

     //alert(select_palletized)

     cal_pallet(select_palletized);

    let total_box = 0;

    let total_nw = 0;

    let total_gw = 0;

    let total_cbm = 0;

    let palletized = 0;

    let net_weight2=0;

    let box=0;



     if(id == 5)

    {



        $this.parent().parent().find('td:nth-child(4) input.number_box').val(qty);

         box=parseFloat(qty);

    }

    else if(id == 2)

    {

        box = parseFloat(qty)/parseFloat(net_weight);



        

       

        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseFloat(box));

    }



    else if(id == 1)

    {

        box = parseFloat(qty)/parseFloat(ean_qty);

        

        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseFloat(box));

        

        

    }



  net_weight2=parseFloat(box)*parseFloat(net_weight);

  $this.parent().parent().find('td:nth-child(2) input.net_weight2').val(parseFloat(net_weight2));







    const nw = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(net_weight);

    $this.parent().parent().find('td:nth-child(5) input.nw').val(nw.toFixed(2));



    const cbm = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(maxcbm);

    $this.parent().parent().find('td:nth-child(5) input.cbm').val(cbm.toFixed(2));

    if(maxpallet != 0){

        const pallet = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())/parseFloat(maxpallet);

        $this.parent().parent().find('td:nth-child(5) input.pallet').val(pallet.toFixed(2));

    }else{

        $this.parent().parent().find('td:nth-child(5) input.pallet').val(0);

    }



  let rebate = parseFloat($('#rebate').val())
  let markup_rate = parseFloat($('#markup_rate').val())

    var markup_rateCal=((0.0198*(markup_rate*markup_rate))+(0.7901*markup_rate)+1.34)/100;

    $("#markup_rateCal").val(markup_rateCal.toFixed(4));





    



    if(id != '' && qty != ''){

        const time = $('#sorted_table tbody tr').length*1000;

        loading(time);

        let check = {};

        const num_box = $this.parent().parent().find('td:nth-child(4) input.number_box').val();

        if(count_ean_id > 1){

            $.each(ean_id,function($key,$val){

                ean = parseFloat(ean_qty)/count_ean_id;

                var pc = parseFloat(num_box)*ean;

                check[$val] = pc;

            })

        }else{

            ean = parseFloat(ean_qty)

            var pc = parseFloat(num_box)*ean;

            check[ean_id] = pc;

        }

        $.each($('.ean_id'),function()

        {

            const count_ean_id2 = $(this).val().split(',').length;

            if($(this).parent().parent().find('td:nth-child(1) select.select_itf').val() != itf_id){

                var id = $(this).val().split(',');

                var number_box = $(this).parent().parent().find('td:nth-child(4) input.number_box').val();

                var qty = $(this).parent().parent().find('input.ean_qty').val();

                if(count_ean_id2 > 1){

                    $.each($(this).val().split(','),function($key,$val){

                        var ean2 = parseFloat(qty)/count_ean_id2

                        var pc2 = parseFloat(number_box)*ean2;

                        if($val in check){

                            check[$val] += pc2;

                        }

                    })

                }else{

                    var ean2 = parseFloat(qty);

                    var pc2 = parseFloat(number_box)*ean2;

                    if(id in check){

                        check[id] += pc2;

                    }

                }

                // reCost($(this).parent().parent().find('td:nth-child(1) select.select_itf').val());

            }

        })

       

        var myJSON = JSON.stringify(check);

        $.ajax({

            url: FULLURL+'/checkpacking',

            method:'get',

            data: {check:myJSON,itf_id:itf_id,num_box:num_box},

            success:function(data){

                console.log(data);

                $.each(data.rs,function(k,v){

                    if(v == 'true' && data.rs_re[k] == 'true'){

                        console.log(data);

                        if(data.count[k] != 0){

                            $.get(FULLURL+'/getCost?id='+itf_id+'&num_box='+num_box)

                            .done(function(data){

                               // console.log(FULLURL+'/getCost?id='+itf_id+'&num_box='+num_box);

                            console.log(data);

                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(data.cost.toFixed(4));

                                $this.parent().parent().find('td:nth-child(5) input.pack_cost').val(data.pack_cost.toFixed(4));

                                $this.parent().parent().find('td:nth-child(5) input.ean_cost').val(data.ean_cost.toFixed(4));
                                //$this.parent().parent().find('td:nth-child(5) input.ean_cost').val(44.76);

                                $this.parent().parent().find('td:nth-child(5) input.total_cost').val(data.total_cost.toFixed(4));





                         

                     

                              let itf_nw= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.nw').val());;









                            let unitPrice;

                            let fixPrice;

                            let of_pallats=0;

                            let total_pallat_weight=0;

                            let itfUnit=id;



                          



                         

                            let box_pallet=$this.parent().parent().find('td:nth-child(5) input.box_pallet').val();



                            let select_chamber = $('#select_chamber').val();

                           // alert("select_chamber:"+select_chamber)

                            if(select_chamber=="yes")

                            {

                               

                              of_pallats=box/parseFloat(box_pallet) 

                              // alert(" of_pallats:"+of_pallats+"   box_pallet:"+box_pallet+" box:"+box) 

                            }

                              $this.parent().parent().find('td:nth-child(5) input.of_pallats').val(parseFloat(of_pallats));

                          let  total_pallet=0;
                          let  complete_pallet=0;
                           if(select_palletized == 'yes')
                           {
                                  total_pallet=box/parseFloat(box_pallet);


                          

                                  complete_pallet=Math.round(total_pallet);

                                  if(complete_pallet<total_pallet)
                                  {
                                    complete_pallet+=1;
                                  }

                                   if(complete_pallet<1)
                                {
                                    complete_pallet=1;
                                }

                                       // alert("total_pallet: "+total_pallet+" complete_pallet:"+complete_pallet)

                            }

                            $("#total_pallet").val(total_pallet);

                            
                          var price_pallet=  parseFloat($("#price_pallet").val());
                          
                            $("#complete_pallet").val(complete_pallet);




                            $("#total_pallet_cost").val(complete_pallet*price_pallet);




                            

                          





let total_box=0;

$.each($('input.number_box'),function(){

            

            total_box += parseFloat($(this).val());

        })





                    

                            total_pallat_weight=(parseFloat($("#weight_pallet").val())/ parseFloat(total_box))*complete_pallet;

//alert("total_pallat_weight: "+total_pallat_weight+" weight_pallet: "+$("#weight_pallet").val()+" total_box"+total_box)

                            let box_weight= $this.parent().parent().find('td:nth-child(5) input.box_weight').val();

                            



                            let total_weight=total_pallat_weight+parseFloat(box_weight);



                              $this.parent().parent().find('td:nth-child(5) input.total_pallat_weight').val(parseFloat(total_pallat_weight));







                              $this.parent().parent().find('td:nth-child(5) input.total_weight').val(parseFloat(total_weight).toFixed(3));



                              let itf_GW1=box*parseFloat(total_weight);



                              $this.parent().parent().find('td:nth-child(5) input.itf_GW1').val(parseFloat(itf_GW1).toFixed(3));



                              let maxcbm= $this.parent().parent().find('td:nth-child(2) input.maxcbm').val();



                              let itf_CBM=box*parseFloat(maxcbm);



                              $this.parent().parent().find('td:nth-child(5) input.itf_CBM').val(parseFloat(itf_CBM).toFixed(3));

                              let clearance=$("#clearance").val();

                              let chamber=$("#chamber").val();

                              //let clearance=$("#clearance").val();

                              let iclearance=0

                              let totaNW=0;

                        $.each($('input.nw'),function(){

                                    

                                    totaNW += parseFloat($(this).val());

                        })





                            let ITF_NWO=$("#ITF_NWO").val();

                            if(box>0)

                            {

                             



                               if(ITF_NWO="actual")

                                {

                                 iclearance= clearance/totaNW*net_weight

                                }

                                else

                                {



                                 iclearance= clearance/parseFloat(ITF_NWO)*net_weight;

                                }





                            }

                            else

                            {

                            iclearance=0;  

                            }





                let ichamber=0;

                  if(select_chamber=="yes" && box>0)

                  {

                     



                     if(ITF_NWO="actual")

                    {

                     ichamber= chamber/totaNW*net_weight

                    }

                    else

                    {



                     ichamber= chamber/parseFloat(ITF_NWO)*net_weight;

                    }



                  }







       




        let tPrice=0;;



       

     

        



        //alert("of_pallats:"+of_pallats)



        let itruck=0;

         



           const total_pallet_cost = parseFloat($('#total_pallet_cost').val());



          let ipallets=total_pallet_cost/total_box;



/// truck price



var total_gw=0;

 $.each($('input.gw_weight'),function(){

            let gw_weight = parseFloat($(this).val());

            total_gw += gw_weight;

        })



    const select_clearance = $('#select_clearance').val();

let transport=0;



           $.ajax({

            url: FULLURL+'/getTruck',

            method:'get',

            data: {total_gw:total_gw,select_clearance:select_clearance,pallet:ipallets},

            success:function(data){



                $("#transport").val(data)



                  transport=parseInt(data);

                



                if(box>0)

                  {

                     



                     if(ITF_NWO="actual")

                    {

                     itruck= transport/totaNW*net_weight

                    }

                    else

                    {



                     itruck= transport/parseFloat(ITF_NWO)*(net_weight*box);

                    }



                  }





                //    alert("net_weight:"+net_weight+" transport price:"+transport+" ITF_NW:"+ITF_NWO+" box:"+box+" totaNW:"+totaNW+" truck:"+itruck)





         





          let ifreight=total_weight*parseFloat($('#freights').val());



    let total_cost=  parseFloat($this.parent().parent().find('td:nth-child(5) input.total_cost').val()).toFixed(2);



        // let tcost=iclearance+ichamber+itruck+ipallets+ifreight;

// alert(total_cost)

   var tcost=parseFloat(total_cost)+parseFloat(iclearance)+parseFloat(itruck)+parseFloat(ipallets)+parseFloat(ifreight);





               let itf_cal_selling=tcost*(1+(((0.0198*(markup_rate*markup_rate))+(0.7901*markup_rate)+1.34)/100));



              // alert("Total Cost:"+tcost+" markup_rate:"+markup_rate);

         $(".itf_cal_selling").val(itf_cal_selling.toFixed(4));



      //  alert(itf_cal_selling);



       // =ROUND(IF(C4="Box",Q4,IF(C4="KG",Q4/ITF!K7,IF(C4="PC",Q4/ITF!J5,"ERROR")))/$B$8,2)







  if(itfUnit=='5')

    {

        unitPrice=itf_cal_selling;

        fixPrice=parseFloat(itf_cal_selling)/parseFloat(ex_rate);



    }

    else if(itfUnit=='2')

    {

        unitPrice=parseFloat(itf_cal_selling)/parseFloat(qty);



        fixPrice=(parseFloat(itf_cal_selling)/parseFloat(net_weight))/parseFloat(ex_rate);

    }

    else if(itfUnit=='1')

    {

        unitPrice=parseFloat(itf_cal_selling)/parseFloat(ean_ppITF);



        fixPrice=(parseFloat(itf_cal_selling)/parseFloat(ean_ppITF))/parseFloat(ex_rate);

    }

    else

    {

        fixPrice=0;

        unitPrice=0;

    }










           // alert(" ex_rate:"+ex_rate)












let itf_fx_price=(parseFloat(fixPrice)*parseFloat(qty))/(parseFloat(box));

let itf_fob=(parseFloat(itf_fx_price)*parseFloat(box)*parseFloat(ex_rate))-(parseFloat(parseFloat(ifreight)*parseFloat(box)).toFixed(2));



if(itfUnit=='5')
{
   fixPrice= itf_fx_price;
}
else if(itfUnit=='2')
{
   fixPrice= parseFloat(itf_fx_price)/parseFloat(net_weight);

  // alert("net_weight:"+net_weight)
}
else if(itfUnit=='1')
{
   fixPrice= parseFloat(itf_fx_price)/parseFloat(qty);
}

let profit2=(parseFloat(itf_fob)+parseFloat(ifreight))-(parseFloat(tcost)*parseFloat(box));

//alert("fixPrice: "+fixPrice+"  ex_rate: "+ex_rate+" qty:"+qty+" red freight:"+ifreight+" box:"+box+" itf_fob:"+itf_fob)


    $this.parent().parent().find('td:nth-child(6) input.unit_price').val(parseFloat(unitPrice));

    $this.parent().parent().find('td:nth-child(5) input.fixPrice').val(parseFloat(fixPrice));


  //profitP=((itf_fx_price*ex_rate)*(1-rebate))-total_cost/itf_cal_celling
  let rebates=parseFloat($('#rebate').val());
  let profitP=((parseFloat(itf_fx_price)*parseFloat(ex_rate))*(1-rebates))-parseFloat(tcost)/parseFloat(itf_cal_selling);
  // let profitP=((parseFloat(itf_fx_price)*parseFloat(ex_rate))-parseFloat(tcost))/(parseFloat(ifreight)+parseFloat(itf_fob))/parseFloat(box);

  // alert("Profit % : "+profitP)

                       



    $this.parent().parent().find('td:nth-child(5) input.profitP').val(parseInt(profitP));





    $this.parent().parent().find('td:nth-child(5) input.itf_fob').val(parseFloat(itf_fob).toFixed(2));

    $this.parent().parent().find('td:nth-child(5) input.profit2').val(parseFloat(profit2).toFixed(3));

    $this.parent().parent().find('td:nth-child(5) input.itf_fx_price').val(parseFloat(itf_fx_price).toFixed(3));















    $this.parent().parent().find('td:nth-child(5) input.iclearance').val(parseFloat(iclearance).toFixed(3));

    $this.parent().parent().find('td:nth-child(5) input.ichamber').val(parseFloat(ichamber).toFixed(3));

    $this.parent().parent().find('td:nth-child(5) input.ipallets').val(parseFloat(ipallets).toFixed(3));

    $this.parent().parent().find('td:nth-child(5) input.itruck').val(parseFloat(itruck).toFixed(3));

    $this.parent().parent().find('td:nth-child(5) input.ifreight').val(parseFloat(ifreight).toFixed(3));





               console.log(data);

            }

        })



           ///  end truck price



        















                          // alert("clearance:"+clearance+" totaNW:"+totaNW+" net_weight:"+net_weight+" ITF_NW: "+ITF_NWO)





                             setTimeout(function()

                            {

                                cal();

                            },1000)



                        })

                       

                     }

                    }

                    else

                    {

                      

                        if(data.count[k] == 0 && parseFloat(data.sum[k]) == 0)

                        {

                            alert('ไม่มีสินค้าที่แพ็คแล้ว / No products have been packed.')

                            $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');

                            $this.parent().parent().find('td:nth-child(2) input.qty').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);

                            $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);

                            $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);

                            $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.nw').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);

                            $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);

                            $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);

                        }

                   

                        $.each(data.count_re,function(key,val){

                            if(val == 0 && parseFloat(data.sum_re[key]) == 0){

                                alert('ไม่มีส่วนประกอบ / No product setup.')

                                $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');

                                $this.parent().parent().find('td:nth-child(2) input.qty').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);

                                $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);

                                $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);

                                $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.nw').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);

                                $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);

                                $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);

                            }

                     

                        })

                    }

                })

            }

        })

        $.each($('input.number_box'),function(){

            const box = parseFloat($(this).val());

            total_box += box;

        })

        $('#span_box').html(total_box);

        $('#total_box').val(total_box);

    

        $.each($('input.nw'),function(){

            const nw = parseFloat($(this).val());

            total_nw += nw;

        })

        $('#span_nw').html(total_nw.toFixed(2));

        $('#total_nw').val(total_nw.toFixed(2));

    }



    if(select_palletized == 'yes'){

        $.each($('input.pallet'),function()

        {

            const pallet = parseFloat($(this).val());

            palletized += pallet;

            const one = pallet/palletized;

            $('#palletized').val(Math.ceil(palletized));

            $('#span_palletized').html(Math.ceil(palletized));

            const total_pallet = parseFloat($('#palletized').val());

            const price_pallet = parseFloat($('#price_pallet').val());

            const two = total_pallet*price_pallet;

            const price_allocation = parseFloat(one)*parseFloat(two);

            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));

            const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();

            const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();

            const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);

            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));



            const palletized_price = (price_pallet*total_pallet)/palletized;

            $('#palletized_price').val(palletized_price.toFixed(4));

        })



        $.each($('input.gw_weight'),function(){

            const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);

            const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

            const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))

            $(this).val(gw_weight.toFixed(2));

        })



        $.each($('input.itf_pallet_price'),function(){

            const palletized_price = parseFloat($('#palletized_price').val());

            const pallet = parseFloat($(this).parent().find('input.pallet').val());

            const itf_pallet_price = pallet*palletized_price;

            $(this).val(itf_pallet_price.toFixed(4));

        })



        $.each($('input.gw_weight'),function(){

            const gw_weight = parseFloat($(this).val());

            total_gw += gw_weight;

        })

        // const weight_pallet = parseFloat($('#weight_pallet').val());

        // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));

        $('#span_gw').html(total_gw.toFixed(2));

        $('#total_gw').val(total_gw.toFixed(2));

        

        $.each($('input.cbm'),function(){

            const cbm = parseFloat($(this).val());

            total_cbm += cbm;

        })

        const cbm_pallet = parseFloat($('#cbm_pallet').val());

        const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));

        $('#span_cbm').html(cal_cbm.toFixed(2));

        $('#total_cbm').val(cal_cbm.toFixed(2));

    }else{

        const gw_weight = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($this.parent().parent().find('td:nth-child(2) input.new_weight').val());

        $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));



        $.each($('input.maxpallet'),function(){

            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);

            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);

            $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);

        })

        

        $.each($('input.gw_weight'),function(){

            const gw_weight = parseFloat($(this).val());

            total_gw += gw_weight;

        })

        $('#span_gw').html(total_gw.toFixed(2));

        $('#total_gw').val(total_gw.toFixed(2));



        $.each($('input.cbm'),function(){

            const cbm = parseFloat($(this).val());

            total_cbm += cbm;

        })

        $('#span_cbm').html(total_cbm.toFixed(2));

        $('#total_cbm').val(total_cbm.toFixed(2));

    }







})



function cal()

{

    //alert();

    $("#myBtn").click();

    const time = $('#sorted_table tbody tr').length*1000;

    loading(time);

    const select_clearance = $('#select_clearance').val();



    let total_nw = $('#total_nw').val();

    let total_gw = $('#total_gw').val();

    let total_cbm = $('#total_cbm').val();

    let palletized = $('#palletized').val();

    let fob = 0;

    let total_all_cost = 0;

    let profit_before_rebate = 0;

    let profit_after_rebate = 0;



    if(select_clearance != '')

    {

        const clearance = parseFloat($('#clearance').val());

        const clearance_price = clearance/total_nw;

        $('#clearance_price').val(clearance_price);

        $.each($('input.itf_clearance_price'),function(){

        const nw = $(this).parent().find('input.nw').val();

        const itf_clearance_price = parseFloat($('#clearance_price').val())*parseFloat(nw);

        $(this).val(itf_clearance_price.toFixed(4))

        })



        $.ajax({

            url: FULLURL+'/compareTransport',

            method:'get',

            data: {total_nw:total_nw,total_cbm:total_cbm,select_clearance:select_clearance,pallet:palletized},

            success:function(data){



                $('#transport').val(data);

                const transport = parseFloat($('#transport').val());

                const transport_price = transport/total_nw;

                $('#transport_price').val(transport_price);

                $.each($('input.itf_transport_price'),function(){

                    const itf_transport_price = parseFloat($('#transport_price').val())*parseFloat($(this).parent().find('input.nw').val());

                    $(this).val(itf_transport_price.toFixed(4))

                    // $(this).val(transport.toFixed(4))

                })

            }

        })

    }

    else

    {

        alert('กรุณาเลือก Clearance แล้วกดคำนวณอีกครั้ง / Please select Clearance then press calculate again')

    }



    if($('#airport').val() != "" && $('#airline').val() != ""){

            $.ajax({

                url: FULLURL+'/getRate',

                method:'get',

                data: {total_gw:total_gw,clear:$('#select_clearance').val(),destination:$('#airport').val(),airline:$('#airline').val()},

                success:function(data){

                    //console.log(data);

                    //alert(data.rate);

                     //$('#freights').val(data.rate);

                    $.each($('.itf_freight_rate'),function(){

                        var $this = $(this);

                        const gw = $this.parent().find('input.gw_weight').val();

                        const itf_freight_rate = parseFloat(data.rate)*parseFloat(gw);

                        $this.val(itf_freight_rate.toFixed(4));



                        const total_freight_rate = parseFloat(data.rate)*parseFloat(total_gw);

                        //alert(total_freight_rate);

                        $('#span_freight').text(total_freight_rate.toFixed(4));

                       // $('#freights').val(data.rate);

                        $('#total_freight').val(total_freight_rate.toFixed(4));



                        //alert(data.rate)

                    })

                }

            })

    }else{

        alert('กรุณาเลือก Airport และ Airline แล้วกดคำนวณอีกครั้ง / Please select Airport and Airline then press calculate again');

    }



    setTimeout(function(){

        $.each($('.total_itf_cost'),function(){

            var $this = $(this);



          

            const pallet_price = $this.parent().find('input.itf_pallet_price').val();

            const clearance_price = $this.parent().find('input.itf_clearance_price').val();

            const transport_price = $this.parent().find('input.itf_transport_price').val();

            const cost_price = $this.parent().find('input.itf_cost_price').val();

            const freight_rate = $this.parent().find('input.itf_freight_rate').val();

            if(pallet_price != "" && clearance_price != "" && transport_price != "" && cost_price != "" && freight_rate != ""){

                const total_itf_cost = parseFloat(pallet_price)+parseFloat(clearance_price)+parseFloat(transport_price)+parseFloat(cost_price)+parseFloat(freight_rate);

                $this.val(total_itf_cost.toFixed(4));

            }

        })

    },700)

    setTimeout(function(){

        if($('.total_itf_cost').val() != ''){

            $.each($('.unit_price'),function(){

                var $this = $(this);

                const total_itf_cost = parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.total_itf_cost').val());

                const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());

                const unit_price = total_itf_cost / qty;

                const markup_rate = parseFloat($('#markup_rate').val())

                const ex_rate = parseFloat($('#ex_rate').val())

                if(markup_rate >= 0 && ex_rate >= 0){

                    const cal = (1+((0.0198*(Math.pow(markup_rate,2))+(0.7901*markup_rate)+1.26)/100))*unit_price/ex_rate;

                    $this.val(cal.toFixed(2));

                }else{

                    alert('กรุณาเลือก Currency และ EX Rate และ Markup Rate แล้วกดคำนวณอีกครั้ง / Please select Currency and EX Rate and Markup Rate then press calculate again');

                }

                

            })

        }

    },1000)

    setTimeout(function(){

        if($('.unit_price').val() != ''){

            $.each($('.profit'),function(){

                var $this = $(this);

                const qty = parseFloat($this.parent().parent().find('td:nth-child(2) input.qty').val());

                const total_itf_cost = parseFloat($this.parent().parent().find('td:nth-child(5) input.total_itf_cost').val());

                const itf_freight_rate = parseFloat($this.parent().parent().find('td:nth-child(5) input.itf_freight_rate').val());

                const unit_price = parseFloat($this.parent().parent().find('td:nth-child(6) input.unit_price').val());

                const ex_rate = parseFloat($('#ex_rate').val())



                const profit = ((unit_price*ex_rate*qty)-total_itf_cost)/total_itf_cost*100;

                $this.val(profit.toFixed(2));

                const fob_th = (unit_price*ex_rate*qty)-itf_freight_rate;

                $this.parent().find('input.fob').val(fob_th.toFixed(4));

            })

        }

    },1100)



    setTimeout(function()

    {

        if($('.unit_price').val() != '')

        {

            $.each($('.unit_price'),function()

            {

                var $this = $(this);

                const unit_price = parseFloat($this.val());

                const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());

                const ex_rate = parseFloat($('#ex_rate').val())

                fob += unit_price*ex_rate*qty;















            })

            const total_fob = fob-$('#total_freight').val();

            $('#span_fob').text(total_fob.toFixed(2));

            $('#total_fob').val(total_fob.toFixed(2));

            $.each($('.total_itf_cost'),function(){

                var $this = $(this);

                const total_itf_cost = parseFloat($this.val());

                total_all_cost += total_itf_cost;

            })

            profit_before_rebate = fob-total_all_cost;

            $('#span_pro_before_rebate').text(profit_before_rebate.toFixed(2));

            $('#total_pro_before_rebate').val(profit_before_rebate.toFixed(2));

        }

    },1300)



    setTimeout(function(){

        if($('#total_pro_before_rebate').val() != ''){

            const rebate = parseFloat($('#rebate').val());

            if($('#rebate').val() != ''){

                profit_after_rebate = profit_before_rebate-(rebate/100*fob);

                $('#span_pro_after_rebate').text(profit_after_rebate.toFixed(2));

                $('#total_pro_after_rebate').val(profit_after_rebate.toFixed(2));

                const profit_percent = (profit_after_rebate/total_all_cost)*100;

                $('#span_pro_percent').text(profit_percent.toFixed(2));

                $('#total_pro_percent').val(profit_percent.toFixed(2));

            }else{

                alert('กรุณากรอก Rebate แล้วกดคำนวณอีกครั้ง / Please enter Rebate then press calculate again')

            }

        }

        $.ajax({

            url: FULLURL+'/getRate',

            method:'get',

            data: {total_gw:total_gw,clear:$('#select_clearance').val(),destination:$('#airport').val(),airline:$('#airline').val()},

            success:function(data){

                if(data.min > total_gw){

                    alert("min GW requirment not met. please increase order to min GW of "+total_gw+' to more than '+data.min);

                }

            }

        })

    },1500)







 $("#Tbl tbody").html(" ");



     $.each($('.unitcount'),function()

            {

                var $this = $(this);

             let qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());





           let itfUnit= $(this).val();;

                let number_box= parseFloat($this.parent().parent().parent().find('td:nth-child(4) input.number_box').val());;

                let nw= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.nw').val());;

               

                let unit_price= parseFloat($this.parent().parent().parent().find('td:nth-child(6) input.unit_price').val()).toFixed(2);;

                let profitP= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.profitP').val());;

                let cost= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_cost_price').val());;

                let itf_cal_selling= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_cal_selling').val());;



                let gw_weight= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.gw_weight').val());;



                let itf_CBM= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_CBM').val());;

                let itf_freight_rate= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_freight_rate').val());;

                let fob=0;

                let rebat=0;



               let itf_fx_price=  parseFloat($this.parent().parent().find('td:nth-child(5) input.itf_fx_price').val()).toFixed(2);

               let total_cost=  parseFloat($this.parent().parent().find('td:nth-child(5) input.total_cost').val()).toFixed(2);

               let ean_cost=  parseFloat($this.parent().parent().find('td:nth-child(5) input.ean_cost').val()).toFixed(2);

               let itf_GW1=  parseFloat($this.parent().parent().find('td:nth-child(5) input.itf_GW1').val()).toFixed(2);
               let fixPrice=  parseFloat($this.parent().parent().find('td:nth-child(5) input.fixPrice').val()).toFixed(2);



                 // let fixPrice=parseFloat(unit_price/parseFloat($("#ex_rate").val())).toFixed(2);



                let iclearance= parseFloat($this.parent().parent().find('td:nth-child(5) input.iclearance').val());

                let ichamber= parseFloat($this.parent().parent().find('td:nth-child(5) input.ichamber').val());

                let itruck= parseFloat($this.parent().parent().find('td:nth-child(5) input.itruck').val());

                let ipallets= parseFloat($this.parent().parent().find('td:nth-child(5) input.ipallets').val());

                let ifreight= parseFloat($this.parent().parent().find('td:nth-child(5) input.ifreight').val());



                let itf_fob=$this.parent().parent().find('td:nth-child(5) input.itf_fob').val();

                let itf_freight_=parseFloat(parseFloat(ifreight)*parseFloat(number_box)).toFixed(2);
                var EX_rate=parseFloat($("#ex_rate").val())
                var rebat1=parseFloat($("#rebate").val())

               //  itf_fob=(parseFloat(itf_fx_price)*parseFloat(number_box)*parseFloat(EX_rate))-parseFloat(itf_freight_); client 
                itf_fob=Math.round(parseFloat((parseFloat(itf_fx_price)*parseFloat(number_box)*parseFloat(EX_rate))-parseFloat(itf_freight_))).toFixed(2);

                let profit2= $this.parent().parent().find('td:nth-child(5) input.profit2').val();


//alert("fixPrice: "+fixPrice+"  ex_rate: "+EX_rate+" qty:"+qty+" red freight:"+ifreight+" box:"+number_box+" itf_fob:"+itf_fob)

                  let rebate = parseFloat($('#rebate').val())

                var tcost=parseFloat(total_cost)+parseFloat(iclearance)+parseFloat(itruck)+parseFloat(ipallets)+parseFloat(ifreight);



               // var tcost=parseFloat(total_cost)+parseFloat(iclearance);

              //  alert("clearance:"+iclearance+" Ean Cost:"+total_cost+" truck:"+itruck+" pallets:"+ipallets+" freight:"+ifreight+" total cost"+tcost)

               






//alert(ifreight+"  "+number_box)

//profit2=(parseFloat(itf_fob)+parseFloat(itf_freight_))-(parseFloat(tcost)*parseFloat(number_box));
// ((V4*$B$8)*(1-B7)-P4)/Q4

profitP=((parseFloat(itf_fx_price)*parseFloat(EX_rate))*(1-parseFloat(rebat1)/100)-parseFloat(tcost))/parseFloat(itf_cal_selling);


               // let price_pr=((itf_fx_price*parseFloat($("#ex_rate").val()))-total_cost)/(fob+itf_freight_rate)/box;


profitP=parseFloat(profitP*100).toFixed(2);




profitP=profitP+"%";


setTimeout(function()
{
    $this.parent().parent().find('td:nth-child(6) input.unit_price').val(fixPrice);

$this.parent().parent().find('td:nth-child(7) input.profit').val(profitP);
//alert(fixPrice)
},1500)

/*$this.parent().parent().find('td:nth-child(6) input.unit_price').val(fixPrice);
$this.parent().parent().find('td:nth-child(5) input.profit').val(profitP);*/
let red="EAN_Cost:"+total_cost+" <br> clearance:"+iclearance+" <br> chamber:"+ichamber+" <br> truck:"+itruck+" <br> pallets:"+ipallets+" <br> ifreight:"+ifreight+" <br> Total_cost:"+tcost+" <br> itf_cal_selling:"+itf_cal_selling;



//rebat=parseFloat((parseFloat(rebat1)*parseFloat(number_box)*parseFloat(itf_fx_price)*parseFloat(EX_rate))/100).toFixed(2);
rebat=parseFloat((parseFloat(itf_fob)+parseFloat(itf_freight_))*parseFloat(rebate)/100).toFixed(2);



let ared="itf_fob:"+Math.round(itf_fob).toFixed(0)+" <br> freight_:"+itf_freight_+" <br> Profit:"+profit2+" <br> Rebate: "+rebat+" <br> ITF FX Price:"+itf_fx_price;








 //alert("unit_price:"+unit_price+" ex_rate:"+$("#ex_rate").val())

              //  $this.parent().parent().parent().find('td:nth-child(5) input.fixPrice').val(fixPrice);;

        

                let str="<tr><td>"+qty+"</td><td>"+itfUnit+"</td><td>"+number_box+"</td><td>"+nw+"</td><td>"+itf_GW1+"</td><td>"+itf_CBM+"</td><td>"+fixPrice+"</td><td>"+profitP+"</td><td>"+red+"</td><td>"+ared+"</td>";

             

              

            

           $("#Tbl tbody").append(str);

      





            })





let total_box=0;

let total_gws=0;

let itf_CBM=0;

let titem=0;

$.each($('input.number_box'),function(){

            

            total_box += parseFloat($(this).val());

            titem+=1;

        })



$.each($('input.itf_GW1'),function(){

            

            total_gws += parseFloat($(this).val());

        }) 



$.each($('input.itf_CBM'),function(){

            

            itf_CBM += parseFloat($(this).val());

        })



let tfrt=0;

let tfob=0;

let tcnf=0;

let pbr=0;

let par=0;

let profit=0;



$(".titem").text(titem);

$(".tbox").text(total_box);

$(".tgw").text(total_gws);

$(".tcbm").text(itf_CBM);

$(".tfrt").text(tfrt);

$(".tfob").text(tfob);

$(".tcnf").text(tcnf);

$(".pbr").text(pbr);

$(".par").text(par);

$(".profit").text(profit);











}



$(document).on('change','.unit_price',function(){

    var $this = $(this);    

    const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());

    

    const total_itf_cost = parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.total_itf_cost').val());

    const itf_freight_rate = parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_freight_rate').val());

    const unit_price = parseFloat($this.val());

    const ex_rate = parseFloat($('#ex_rate').val())

    let rebate = parseFloat($('#rebate').val())

    const profit = ((unit_price*ex_rate*qty)-total_itf_cost)/total_itf_cost*100;

    var markup_rateCall=((0.0198*(markup_rate*markup_rate))+(0.7901*markup_rate)+1.34)/100;

    $("#markup_rateCal").val(markup_rateCall.toFixed(4));



    //alert(markup_rateCal)

    $this.parent().parent().parent().find('td:nth-child(7) input.profit').val(profit.toFixed(2));







    const fob_th = (unit_price*ex_rate*qty)-itf_freight_rate;

    $this.parent().parent().parent().find('td:nth-child(7) input.fob').val(fob_th.toFixed(4));



    let fob = 0;

    let total_all_cost = 0;

    let profit_before_rebate = 0;

    let profit_after_rebate = 0;

    setTimeout(function(){

        $.each($('.unit_price'),function(){

            var $this = $(this);

            const unit_price = parseFloat($this.val());

            const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());

            const ex_rate = parseFloat($('#ex_rate').val())

            fob += unit_price*ex_rate*qty;

        })

        const total_fob = fob-$('#total_freight').val();

        $('#span_fob').text(total_fob.toFixed(2));

        $('#total_fob').val(total_fob.toFixed(2));

        $.each($('.total_itf_cost'),function(){

            var $this = $(this);

            const total_itf_cost = parseFloat($this.val());

            total_all_cost += total_itf_cost;

        })

        profit_before_rebate = fob-total_all_cost;

        $('#span_pro_before_rebate').text(profit_before_rebate.toFixed(2));

        $('#total_pro_before_rebate').val(profit_before_rebate.toFixed(2));

    },1000)

    setTimeout(function(){

        if($('#total_pro_before_rebate').val() != ''){

            const rebate = parseFloat($('#rebate').val());

            if($('#rebate').val() != ''){

                profit_after_rebate = profit_before_rebate-(rebate/100*fob);

                $('#span_pro_after_rebate').text(profit_after_rebate.toFixed(2));

                $('#total_pro_after_rebate').val(profit_after_rebate.toFixed(2));

                const profit_percent = profit_after_rebate/total_all_cost*100;

                $('#span_pro_percent').text(profit_percent.toFixed(2));

                $('#total_pro_percent').val(profit_percent.toFixed(2));

            }else{

                alert('กรุณากรอก Rebate แล้วกดคำนวณอีกครั้ง / Please enter Rebate then press calculate again')

            }

        }

    },1200)

})



function sum_array(input){       

    if(toString.call(input) !== "[object Array]")

        return false;

            

        var total =  0;

        for(var i=0;i<input.length;i++)

        {                  

            if(isNaN(input[i])){

            continue;

            }

            total += Number(input[i]);

        }

        return total;

}



function loading(time){

    swal.fire({

        title: 'Now loading',

        allowEscapeKey: false,

        allowOutsideClick: false,

        timer: time,

        onOpen: () => {

          swal.showLoading();

        }

    })

}













































function cal_pallet(n)

{

    

    if(n=='yes')

    {

        let palletized=0;



          $.each($('input.pallet'),function()

          {

                        let pallet = parseFloat($(this).val());

                        palletized += pallet;



                        //alert(palletized);

                        let one = pallet/palletized;

                        $('#palletized').val(Math.ceil(palletized));

                        $('#span_palletized').html(Math.ceil(palletized));

                        const total_pallet = parseFloat($('#palletized').val());

                        const price_pallet = parseFloat($('#price_pallet').val());

                        const two = total_pallet*price_pallet;

                        const price_allocation = parseFloat(one)*parseFloat(two);

                        $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));

                        const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();

                        const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();

                        const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);

                        $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));

            

                        let palletized_price = (price_pallet*total_pallet)/palletized;

                        $('#palletized_price').val(palletized_price.toFixed(4));

                    })





           let select_palletized = $('#select_pallet').val();

            let select_clearance = $('#select_clearance').val();



        $.each($('input.gw_weight'),function()

        {

            let pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);

            let gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());

            let gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))

            $(this).val(gw_weight.toFixed(2));



        $(this).parent().parent().find('td:nth-child(5) input.itf_GW').val(gw.toFixed(2));

        

        })

    }



}





function getPalatass()

{

     const time = $('#sorted_table tbody tr').length*1000;

    loading(time);

    const select_clearance = $('#select_clearance').val();

     let total_nw = $('#total_nw').val();

    let total_gw = $('#total_gw').val();

    let total_cbm = $('#total_cbm').val();

    let palletized = $('#palletized').val();

    let fob = 0;

    let total_all_cost = 0;

    let profit_before_rebate = 0;

    let profit_after_rebate = 0;



    if(select_clearance != '')

    {

        const clearance = parseFloat($('#clearance').val());

        const clearance_price = clearance/total_nw;

        $('#clearance_price').val(clearance_price);

        $.each($('input.itf_clearance_price'),function(){

        const nw = $(this).parent().find('input.nw').val();

        const itf_clearance_price = parseFloat($('#clearance_price').val())*parseFloat(nw);

        $(this).val(itf_clearance_price.toFixed(4))

        })



        $.ajax({

            url: FULLURL+'/compareTransport',

            method:'get',

            data: {total_nw:total_nw,total_cbm:total_cbm,select_clearance:select_clearance,pallet:palletized},

            success:function(data){



                $('#transport').val(data);

                const transport = parseFloat($('#transport').val());

                const transport_price = transport/total_nw;

                $('#transport_price').val(transport_price);

                $.each($('input.itf_transport_price'),function(){

                    const itf_transport_price = parseFloat($('#transport_price').val())*parseFloat($(this).parent().find('input.nw').val());

                    $(this).val(itf_transport_price.toFixed(4))

                    // $(this).val(transport.toFixed(4))

                })

            }

        })

    }

}