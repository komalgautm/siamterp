var fullUrl = window.location.origin;
var FULLURL="quotation";

$('form').submit(function(){
    $(this).children('button[type=submit]').prop('disabled', true);
});

$.ajaxSetup({headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')}});
$( document ).ready(function() {
    $('.select2').select2();
});

$('.cancel').on('click',function(){
    const id = $(this).data('id');
    Swal.fire({
        title:"Cancel",text:"Do you want to cancel the Quotation ?",icon:"warning",showCancelButton:true,confirmButtonColor:"#DD6B55",showLoaderOnConfirm: true,
        preConfirm: () => {
            return fetch(fullUrl+'/quotation/cancel?id='+id)
            .then(response => response.json())
            .then(data => location.reload())
            .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})
        }
    });
})

$('.approve').on('click',function(){
    const id = $(this).data('id');
    Swal.fire({
        title:"Approve",text:"Do you want to approve the Quotation?",icon:"warning",showCancelButton:true,confirmButtonColor:"#5ae87d",showLoaderOnConfirm: true,
        preConfirm: () => {
            return fetch(fullUrl+'/quotation/approve?id='+id)
            .then(response => response.json())
            .then(data => location.reload())
            .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})
        }
    });
})

// $('.getOrder').on('click',function(){
//     const id = $(this).data('id');
//     Swal.fire({
//         title:"Issue Order",text:"Do you want to Issue Order?",icon:"warning",showCancelButton:true,confirmButtonColor:"#5ae87d",showLoaderOnConfirm: true,
//         preConfirm: () => {
//             return fetch(fullUrl+'/quotation/getOrder?id='+id)
//             .then(response => response.json())
//             .then(data => location.reload())
//             .catch(error => { Swal.showValidationMessage(`Request failed: ${error}`)})
//         }
//     });
// })

var itf = $.ajax({url:FULLURL+'/getITF',method:'get',async:false,success:function(rs){ itf=rs }}).responseText;
var unit = $.ajax({url:FULLURL+'/getUnit',method:'get',async:false,success:function(data){ unit=data }}).responseText;
$(document).on('click','.add-row',function(){
    const currency = $('#currency').children("option:selected").text()
    var row = $('#sorted_table').find('tbody tr').last().data('id');
    var markup = '<tr id="row'+(row+1)+'" data-id="'+(row+1)+'"><td data-label="ITF"><select name="itf[]" id="itf'+(row+1)+'" class="form-control select_itf select2" style="width:100%">'+itf+'</select></td><td data-label="Quantity"><input type="number" class="form-control qty" name="quantity[]" step="0.01" min="0" placeholder="Enter quantity" onkeydown="myFunction('+(row+1)+')" value="" id="tqty'+(row+1)+'"><input type="hidden" class="ean_id" name="ean_id[]" placeholder="ean_id"><input type="hidden" class="ean_qty" name="ean_qty[]" placeholder="ean_qty"><input type="hidden" class="net_weight" name="net_weight[]" placeholder="net_weight"><input type="hidden" class="new_weight" name="new_weight[]" placeholder="new_weight"><input type="hidden" class="maxcbm" name="maxcbm[]" placeholder="maxcbm"><input type="hidden" class="maxpallet" name="maxpallet[]" placeholder="maxpallet"></td><td data-label="Unit"><select name="unitcount[]" id="unitcount'+(row+1)+'" class="form-control unitcount " style="width:100%">'+unit+'</select></td><td data-label="Number of Box"><input type="text" class="form-control number_box" name="number_box[]" value="" placeholder="" readonly></td><td data-label="NW"><input type="text" class="form-control nw" name="nw[]" value="" placeholder="" readonly><input type="hidden" class="form-control gw_weight" name="gw_weight[]" placeholder="gw_weight"><input type="hidden" class="form-control cbm" name="cbm[]" placeholder="cbm"><input type="hidden" class="form-control pallet" name="pallet[]" placeholder="pallet"><input type="hidden" class="form-control price_allocation" name="price_allocation[]" placeholder="price_allocation"><input type="hidden" class="form-control price_pallet_unit" name="price_pallet_unit[]" placeholder="price_pallet_unit"><input type="hidden" class="form-control itf_pallet_price" name="itf_pallet_price[]" placeholder="itf_pallet_price"><input type="hidden" class="form-control itf_clearance_price" name="itf_clearance_price[]" placeholder="itf_clearance_price"><input type="hidden" class="form-control itf_transport_price" name="itf_transport_price[]" placeholder="itf_transport_price"><input type="hidden" class="form-control itf_cost_price" name="itf_cost_price[]" placeholder="itf_cost_price"><input type="hidden" class="form-control itf_freight_rate" name="itf_freight_rate[]" placeholder="itf_freight_rate"><input type="hidden" class="form-control total_itf_cost" name="total_itf_cost[]" placeholder="total_itf_cost"></td><td data-label="Unit Price"><div class="input-group"><input class="form-control unit_price" type="text" name="unit_price[]" placeholder=""><div class="input-group-append"><span class="input-group-text currency_text">'+currency+'</span></div></div></td><td data-label="Profit"><input class="form-control profit" type="text" name="profit[]" placeholder="" readonly><input class="form-control fob" type="hidden" name="fob[]" placeholder="" readonly></td><td data-label="Action"><a href="javascript:" class="btn btn-danger delete-row" data-id="'+(row+1)+'" title="Delete"><i class="far fa-trash-alt"></i></a></td></tr>';
    $("#sorted_table").append(markup);
    $('.select2').select2();
});

$(document).on('click','.delete-row',function(){
    const timing = $(this).data('timing');
    Swal.fire({
        title:"Delete",text:"Do you want to delete row ?",icon:"warning",showCancelButton:true,confirmButtonColor:"#DD6B55",showLoaderOnConfirm: true,
        preConfirm: () => {
            if(typeof undefined == typeof timing)
            {
                $(this).parent().parent().remove();
            }else{
                const id = $(this).data('id');
                $.ajax({
                    url: FULLURL+'/destroyITF',
                    method:'get',
                    data: {id:id},
                });
                $(this).parent().parent().remove();
            }
            const select_palletized = $('#select_pallet').val();
            const select_clearance = $('#select_clearance').val();
            let total_box = 0;
            let total_nw = 0;
            let total_gw = 0;
            let total_cbm = 0;
            let palletized = 0;
            $.each($('input.number_box'),function(){
                const box = parseFloat($(this).val());
                total_box += box;
            })
            $('#span_box').html(total_box);
            $('#total_box').val(total_box);

            $.each($('input.nw'),function(){
                const nw = parseFloat($(this).val());
                total_nw += nw;
            })
            $('#span_nw').html(total_nw);
            $('#total_nw').val(total_nw);
            if(select_palletized == 'yes'){
                $('#hid_palletizad').attr('style','display:inline');
            if($('#total_box').val() != ''){
                    $.each($('input.pallet'),function(){
                        const pallet = parseFloat($(this).val());
                        palletized += pallet;
                        const one = pallet/palletized;
                        $('#palletized').val(Math.ceil(palletized));
                        $('#span_palletized').html(Math.ceil(palletized));
                        const total_pallet = parseFloat($('#palletized').val());
                        const price_pallet = parseFloat($('#price_pallet').val());
                        const two = total_pallet*price_pallet;
                        const price_allocation = parseFloat(one)*parseFloat(two);
                        $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));
                        const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();
                        const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();
                        const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);
                        $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));
            
                        const palletized_price = (price_pallet*total_pallet)/palletized;
                        $('#palletized_price').val(palletized_price.toFixed(4));
                    })
            
                    $.each($('input.gw_weight'),function(){
                        const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);
                        const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
                        const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))
                        $(this).val(gw_weight.toFixed(2));
                    })
            
                    $.each($('input.itf_pallet_price'),function(){
                        const palletized_price = parseFloat($('#palletized_price').val());
                        const pallet = parseFloat($(this).parent().find('input.pallet').val());
                        const itf_pallet_price = pallet*palletized_price;
                        $(this).val(itf_pallet_price.toFixed(4));
                    })
            
                    $.each($('input.gw_weight'),function(){
                        const gw_weight = parseFloat($(this).val());
                        total_gw += gw_weight;
                    })
                    // const weight_pallet = parseFloat($('#weight_pallet').val());
                    // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));
                    $('#span_gw').html(total_gw.toFixed(2));
                    $('#total_gw').val(total_gw.toFixed(2));
                    
                    $.each($('input.cbm'),function(){
                        const cbm = parseFloat($(this).val());
                        total_cbm += cbm;
                    })
                    const cbm_pallet = parseFloat($('#cbm_pallet').val());
                    const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));
                    $('#span_cbm').html(cal_cbm.toFixed(2));
                    $('#total_cbm').val(cal_cbm.toFixed(2));
                }
            }else{
                $('#hid_palletizad').attr('style','display:none');
                if($('#total_box').val() != ''){
                    $.each($('input.gw_weight'),function(){
                    const gw_weight = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
                    $(this).parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));
                    })
                    
                    $.each($('input.maxpallet'),function(){
                        $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);
                        $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);
                        $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);
                    })

                    $.each($('input.gw_weight'),function(){
                        const gw_weight = parseFloat($(this).val());
                        total_gw += gw_weight;
                    })
                    $('#span_gw').html(total_gw);
                    $('#total_gw').val(total_gw);

                    $.each($('input.cbm'),function(){
                        const cbm = parseFloat($(this).val());
                        total_cbm += cbm;
                    })
                    $('#span_cbm').html(total_cbm.toFixed(2));
                    $('#total_cbm').val(total_cbm.toFixed(2));
                }
            }
        }
    });
});

$(document).on('change','#client',function(){
    var $this = $(this);
    const id = $this.val();
    $.get(FULLURL+'/getShip?id='+id)
    .done(function(data){
        // console.log(data)
        $('#shipto').empty();
        $('#shipto').append(data);
    })
    $.get(FULLURL+'/getAir?shipto_id=')
    .done(function(data){
        // console.log(data)
        $('#airport').empty();
        $('#airport').append(data.airport);
        $('#airline').empty();
        $('#airline').append(data.airline);
    })
})

$(document).on('change','#shipto',function(){
    var $this = $(this);
    const id = $this.val();
    $.get(FULLURL+'/getAir?shipto_id='+id)
    .done(function(data){
        // console.log(data)
        $('#airport').empty();
        $('#airport').append(data.airport);
        $('#airline').empty();
        $('#airline').append(data.airline);
    })
})

$(document).on('change','#airport',function(){
    var $this = $(this);
    const id = $this.val();
    if($this.val() != "")
    {
        $('#shipto').attr('disabled',true);
        $.get(FULLURL+'/getAir?airport_id='+id)
        .done(function(data){
            $('#airline').empty();
            $('#airline').append(data.airline);
        })
    }else{
        $('#shipto').attr('disabled',false);
        $.get(FULLURL+'/getAir?airport_id='+id)
        .done(function(data){
            $('#airline').empty();
            $('#airline').append(data.airline);
        })
    }
})

$(document).on('change','#currency',function(){
    if($(this).val() == 1){
        $('#ex_rate').val(1);
    }else{
        $('#ex_rate').val(null);
    }
    $('.currency_text').text($(this).children("option:selected").text());
})

$(document).on('change','#select_pallet',function(){
    var $this = $(this);
    const val = $this.val();
    let total_box = 0;
    let total_nw = 0;
    let total_gw = 0;
    let total_cbm = 0;
    let palletized = 0;
    if(val == 'yes')
    {
        $('#hid_palletizad').attr('style','display:inline');
        if($('#total_box').val() != ''){
            $.each($('input.pallet'),function(){
                const pallet = parseFloat($(this).val());
                palletized += pallet;
                const one = pallet/palletized;
                $('#palletized').val(Math.ceil(palletized));
                $('#span_palletized').html(Math.ceil(palletized));
                const total_pallet = parseFloat($('#palletized').val());
                const price_pallet = parseFloat($('#price_pallet').val());
                const two = total_pallet*price_pallet;
                const price_allocation = parseFloat(one)*parseFloat(two);
                $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));
                const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();
                const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();
                const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);
                $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));
    
                const palletized_price = (price_pallet*total_pallet)/palletized;
                $('#palletized_price').val(palletized_price.toFixed(4));
            })
    
            $.each($('input.gw_weight'),function(){
                const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);
                const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
                const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))
                $(this).val(gw_weight.toFixed(2));
            })
    
            $.each($('input.itf_pallet_price'),function(){
                const palletized_price = parseFloat($('#palletized_price').val());
                const pallet = parseFloat($(this).parent().find('input.pallet').val());
                const itf_pallet_price = pallet*palletized_price;
                $(this).val(itf_pallet_price.toFixed(4));
            })
    
            $.each($('input.gw_weight'),function(){
                const gw_weight = parseFloat($(this).val());
                total_gw += gw_weight;
            })
            // const weight_pallet = parseFloat($('#weight_pallet').val());
            // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));
            $('#span_gw').html(total_gw.toFixed(2));
            $('#total_gw').val(total_gw.toFixed(2));
            
            $.each($('input.cbm'),function(){
                const cbm = parseFloat($(this).val());
                total_cbm += cbm;
            })
            const cbm_pallet = parseFloat($('#cbm_pallet').val());
            const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));
            $('#span_cbm').html(cal_cbm.toFixed(2));
            $('#total_cbm').val(cal_cbm.toFixed(2));
        }
    }else{
        $('#hid_palletizad').attr('style','display:none');
        if($('#total_box').val() != ''){
            $.each($('input.gw_weight'),function(){
            const gw_weight = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
            $(this).parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));
            })
            
            $.each($('input.maxpallet'),function(){
                $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);
                $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);
                $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);
            })

            $.each($('input.gw_weight'),function(){
                const gw_weight = parseFloat($(this).val());
                total_gw += gw_weight;
            })
            $('#span_gw').html(total_gw);
            $('#total_gw').val(total_gw);

            $.each($('input.cbm'),function(){
                const cbm = parseFloat($(this).val());
                total_cbm += cbm;
            })
            $('#span_cbm').html(total_cbm.toFixed(2));
            $('#total_cbm').val(total_cbm.toFixed(2));
        }
    }
})

$(document).on('change','#select_clearance',function(){
    var $this = $(this);
    const id = $this.val();
    if($this.val() != ''){
        $.get(FULLURL+'/getClearance?id='+id)
        .done(function(data){
            $('#clearance').val(data.clearance)
            $('#chamber').val(data.chamber)
        })
    }
})

$(document).on('change','#select_chamber',function(){
    var $this = $(this);
    const val = $this.val();
    if(val == 'yes'){
        const clearance = parseFloat($('#clearance').val());
        const chamber = parseFloat($('#chamber').val());
        const new_clearance = parseFloat(clearance)+parseFloat(chamber);
        $('#clearance').val(new_clearance);
    }else{
        const clearance = parseFloat($('#clearance').val());
        const chamber = parseFloat($('#chamber').val());
        const new_clearance = parseFloat(clearance)-parseFloat(chamber);
        $('#clearance').val(new_clearance);
    }
})

$(document).on('change','.select_itf',function(){
    var $this = $(this);
    const id = $this.val();
    let count = 0;
    $.each($('.select_itf'),function(){
        const val = $(this).val();
        if(id == val){
            count = count+1;
        }
    })
    if(count > 1){
        alert('มีรายการที่เลือกอยู่แล้ว / The item selected already exists.')
        $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');
        $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
        $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
        $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
        $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
        $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
        $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
    }else{
        if($this.val() != '')
        $.get(FULLURL+'/getVal?id='+id)
        .done(function(data){
            $this.parent().parent().find('td:nth-child(2) input.qty').attr('data-ean',data.ean_id);
            $this.parent().parent().find('td:nth-child(2) input.ean_id').val(data.ean_id);
            $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(data.qty);
            $this.parent().parent().find('td:nth-child(2) input.net_weight').val(data.net_weight);
            $this.parent().parent().find('td:nth-child(2) input.new_weight').val(data.new_weight);
            $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(data.maxcbm);
            $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(data.maxpallet);
            $this.parent().parent().find('td:nth-child(2) input.ean_ppITF').val(data.ean_ppITF);

        })
    }
    $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
    $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
    $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
    $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
    $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
    $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
    $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
    $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
    $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
    $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
    $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
    $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
    $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
    $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
    $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.total_itf_cost').val(null);
    $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
    $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
    $this.parent().parent().find('td:nth-child(7) input.profit').val(null);
})

$(document).on('change','.qty',function(){
    var $this = $(this);
    const qty = $this.val();
    const itf_id = $this.parent().parent().find('td:nth-child(1) select.select_itf').val();
    const id = $this.parent().parent().find('td:nth-child(3) select.unitcount').val();
    const ean_id = $this.parent().parent().find('td:nth-child(2) input.ean_id').val().split(',');
    const count_ean_id = ean_id.length;
    const ean_qty = $this.parent().parent().find('td:nth-child(2) input.ean_qty').val();
    const ean_ppITF = $this.parent().parent().find('td:nth-child(2) input.ean_ppITF').val();
    const net_weight = $this.parent().find('input.net_weight').val();
    const maxcbm = $this.parent().find('input.maxcbm').val();
    const maxpallet = $this.parent().find('input.maxpallet').val();
    const select_palletized = $('#select_pallet').val();

    let total_box = 0;
    let total_nw = 0;
    let total_gw = 0;
    let total_cbm = 0;
    let palletized = 0;
    $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
    $this.parent().parent().find('td:nth-child(5) input.total_itf_cost').val(null);
    $this.parent().parent().find('td:nth-child(5) input.itf_freight_rate').val(null);
    $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
    $this.parent().parent().find('td:nth-child(7) input.profit').val(null);
    if(id == 1)
    {
        const cal = qty/parseFloat(ean_ppITF);
        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseInt(cal));
    }
    else if(id == 2)
    {
        const cal = parseFloat(qty)/parseFloat(ean_qty);
        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseInt(cal));
    }
    else if(id == 5)
    {
        $this.parent().parent().find('td:nth-child(4) input.number_box').val(qty);
    }
var number_box=parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val());

    const nw = number_box*qty;///parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(net_weight);
    $this.parent().parent().find('td:nth-child(5) input.nw').val(nw.toFixed(2));
    const cbm = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(maxcbm);
    $this.parent().parent().find('td:nth-child(5) input.cbm').val(cbm.toFixed(2));
    if(maxpallet != 0){
        const pallet = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())/parseFloat(maxpallet);
        $this.parent().parent().find('td:nth-child(5) input.pallet').val(pallet.toFixed(2));
    }else{
        $this.parent().parent().find('td:nth-child(5) input.pallet').val(0);
    }
    

    if(id != '' && qty != ''){
        const time = $('#sorted_table tbody tr').length*1000;
        loading(time);
        let check = {};
        const num_box = $this.parent().parent().find('td:nth-child(4) input.number_box').val();
        if(count_ean_id > 1){
            $.each(ean_id,function($key,$val){
                ean = parseFloat(ean_qty)/count_ean_id;
                var pc = parseFloat(num_box)*ean;
                check[$val] = pc;
            })
        }else{
            ean = parseFloat(ean_qty)
            var pc = parseFloat(num_box)*ean;
            check[ean_id] = pc;
        }
        $.each($('.ean_id'),function(){
            const count_ean_id2 = $(this).val().split(',').length;
            if($(this).parent().parent().find('td:nth-child(1) select.select_itf').val() != itf_id){
                var id = $(this).val().split(',');
                var number_box = $(this).parent().parent().find('td:nth-child(4) input.number_box').val();
                var qty = $(this).parent().parent().find('input.ean_qty').val();
                if(count_ean_id2 > 1){
                    $.each($(this).val().split(','),function($key,$val){
                        var ean2 = parseFloat(qty)/count_ean_id2
                        var pc2 = parseFloat(number_box)*ean2;
                        if($val in check){
                            check[$val] += pc2;
                        }
                    })
                }else{
                    var ean2 = parseFloat(qty);
                    var pc2 = parseFloat(number_box)*ean2;
                    if(id in check){
                        check[id] += pc2;
                    }
                }
                reCost($(this).parent().parent().find('td:nth-child(1) select.select_itf').val());
            }
        })
        var myJSON = JSON.stringify(check);
        $.ajax({
            url: FULLURL+'/checkpacking',
            method:'get',
            data: {check:myJSON,itf_id:itf_id,num_box:num_box},
            success:function(data){
                $.each(data.rs,function(k,v){
                    if(v == 'true' && data.rs_re[k] == 'true'){
                        if(data.count[k] != 0){
                            $.get(FULLURL+'/getCost?id='+itf_id+'&num_box='+num_box)
                            .done(function(data){
                                 alert(data.cost+" ok")
                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(data.cost.toFixed(4));
                                $this.parent().parent().find('td:nth-child(5) input.itf_cost').val(data.cost.toFixed(4));

                            })
                            // setTimeout(function(){
                            // $.get(FULLURL+'/getAverage?check='+myJSON)
                            //     .done(function(aver){
                            //         $.each($('.ean_id'),function(){
                            //             if($(this).val() == ean_id){
                            //                 $(this).parent().find('input.average_lot').val(aver);
                            //             }
                            //         })
                            //     })
                            // },time)
                            // $this.parent().parent().find('td:nth-child(8) button.calculate-row').removeAttr("disabled", "disabled");
                            // $this.parent().parent().find('td:nth-child(8) button.update-row').removeAttr("disabled", "disabled");
                            // $this.parent().parent().attr('style','background-color:#8cff8c');
                        }
                    }else{
                        // $.each($('.ean_id'),function(){
                        //     const id = $(this).val()
                        //     if(k == id){
                        //         $(this).parent().parent().attr('style','background-color:#fd4558');
                        //     }
                        // })
                        if(data.count[k] == 0 && parseFloat(data.sum[k]) == 0){
                            alert('ไม่มีสินค้าที่แพ็คแล้ว / No products have been packed.')
                            $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');
                            $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
                            $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                            $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                            $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                        }
                        // else if(data.count[k] != 0 && parseFloat(data.sum[k]) < check[k]){
                        //     alert('จำนวนไม่เพียงพอ มีจำนวน '+data.name[k]+' ที่แพ็คแล้ว '+data.sum[k]+' / Not enough There are a number of '+data.name[k]+' that have been packaged '+data.sum[k])
                        //     $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                        //     $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                        //     $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                        //     $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                        //     $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                        // }
                        $.each(data.count_re,function(key,val){
                            if(val == 0 && parseFloat(data.sum_re[key]) == 0){
                                alert('ไม่มีส่วนประกอบ / No product setup.')
                                $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');
                                $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
                                $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                                $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                                $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                            }
                            // else if($val != 0 && parseFloat(data.sum_re[$key]) < pc){
                            //     alert('จำนวนไม่เพียงพอ มีจำนวน '+data.name_re[$key]+' '+data.sum[$key]+' / Not enough There are a number of '+data.name_re[$key]+' '+data.sum[$key])
                            //     $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                            //     $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                            //     $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                            //     $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                            //     $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                            // }
                        })
                    }
                })
            }
        })
        $.each($('input.number_box'),function(){
            const box = parseFloat($(this).val());
            total_box += box;
        })
        $('#span_box').html(total_box);
        $('#total_box').val(total_box);
    
        $.each($('input.nw'),function(){
            const nw = parseFloat($(this).val());
            total_nw += nw;
        })
        $('#span_nw').html(total_nw);
        $('#total_nw').val(total_nw);
    }

    if(select_palletized == 'yes'){
        $.each($('input.pallet'),function(){
            const pallet = parseFloat($(this).val());
            palletized += pallet;
            const one = pallet/palletized;
            $('#palletized').val(Math.ceil(palletized));
            $('#span_palletized').html(Math.ceil(palletized));
            const total_pallet = parseFloat($('#palletized').val());
            const price_pallet = parseFloat($('#price_pallet').val());
            const two = total_pallet*price_pallet;
            const price_allocation = parseFloat(one)*parseFloat(two);
            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));
            const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();
            const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();
            const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);
            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));

            const palletized_price = (price_pallet*total_pallet)/palletized;
            $('#palletized_price').val(palletized_price.toFixed(4));
        })

        $.each($('input.gw_weight'),function(){
            const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);
            const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
            const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))
            $(this).val(gw_weight.toFixed(2));
        })

        $.each($('input.itf_pallet_price'),function(){
            const palletized_price = parseFloat($('#palletized_price').val());
            const pallet = parseFloat($(this).parent().find('input.pallet').val());
            const itf_pallet_price = pallet*palletized_price;
            $(this).val(itf_pallet_price.toFixed(4));
        })

        $.each($('input.gw_weight'),function(){
            const gw_weight = parseFloat($(this).val());
            total_gw += gw_weight;
        })
        // const weight_pallet = parseFloat($('#weight_pallet').val());
        // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));
        $('#span_gw').html(total_gw.toFixed(2));
        $('#total_gw').val(total_gw.toFixed(2));
        
        $.each($('input.cbm'),function(){
            const cbm = parseFloat($(this).val());
            total_cbm += cbm;
        })
        const cbm_pallet = parseFloat($('#cbm_pallet').val());
        const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));
        $('#span_cbm').html(cal_cbm.toFixed(2));
        $('#total_cbm').val(cal_cbm.toFixed(2));
    }else{
        const gw_weight = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($this.parent().parent().find('td:nth-child(2) input.new_weight').val());
        $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));

        $.each($('input.maxpallet'),function(){
            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);
            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);
            $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);
        })

        $.each($('input.gw_weight'),function(){
            const gw_weight = parseFloat($(this).val());
            total_gw += gw_weight;
        })
        $('#span_gw').html(total_gw.toFixed(2));
        $('#total_gw').val(total_gw.toFixed(2));

        $.each($('input.cbm'),function(){
            const cbm = parseFloat($(this).val());
            total_cbm += cbm;
        })
        $('#span_cbm').html(total_cbm.toFixed(2));
        $('#total_cbm').val(total_cbm.toFixed(2));
    }
})

$(document).on('change','.unitcount',function(){
    var $this = $(this);
    const qty = $this.parent().parent().find('td:nth-child(2) input.qty').val();
    const itf_id = $this.parent().parent().find('td:nth-child(1) select.select_itf').val();
    const id = $this.val();
    const ean_id = $this.parent().parent().find('td:nth-child(2) input.ean_id').val().split(',');
    const count_ean_id = ean_id.length;
    const ean_qty = $this.parent().parent().find('td:nth-child(2) input.ean_qty').val();
    const net_weight = $this.parent().parent().find('input.net_weight').val();
    const maxcbm = $this.parent().parent().find('input.maxcbm').val();
    const maxpallet = $this.parent().parent().find('input.maxpallet').val();
    const select_palletized = $('#select_pallet').val();
     const ean_ppITF = $this.parent().parent().find('td:nth-child(2) input.ean_ppITF').val();

    let total_box = 0;
    let total_nw = 0;
    let total_gw = 0;
    let total_cbm = 0;
    let palletized = 0;
    // $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
    // $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
    // $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
    // $this.parent().parent().find('td:nth-child(5) input.total_itf_cost').val(null);
    // $this.parent().parent().find('td:nth-child(5) input.itf_freight_rate').val(null);
    // $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
    // $this.parent().parent().find('td:nth-child(7) input.profit').val(null);
    if(id == 1)
    {
        const cal = parseFloat(qty)/parseFloat(ean_ppITF);
        
        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseInt(cal));
    }else if(id == 2)
    {
        const cal = parseFloat(qty)/parseFloat(ean_qty);
       
        $this.parent().parent().find('td:nth-child(4) input.number_box').val(parseInt(cal));
    }
    else if(id == 5)
    {

        $this.parent().parent().find('td:nth-child(4) input.number_box').val(qty);
    }
    const nw = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(net_weight);
    $this.parent().parent().find('td:nth-child(5) input.nw').val(nw.toFixed(2));
    const cbm = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat(maxcbm);
    $this.parent().parent().find('td:nth-child(5) input.cbm').val(cbm.toFixed(2));
    if(maxpallet != 0){
        const pallet = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())/parseFloat(maxpallet);
        $this.parent().parent().find('td:nth-child(5) input.pallet').val(pallet.toFixed(2));
    }else{
        $this.parent().parent().find('td:nth-child(5) input.pallet').val(0);
    }

  let rebate = parseFloat($('#rebate').val())
    var rebateCall=((0.0198*(rebate*rebate))+(0.7901*rebate)+1.34)/100;
    $("#rebateCal").val(rebateCall.toFixed(4));


    

    if(id != '' && qty != ''){
        const time = $('#sorted_table tbody tr').length*1000;
        loading(time);
        let check = {};
        const num_box = $this.parent().parent().find('td:nth-child(4) input.number_box').val();
        if(count_ean_id > 1){
            $.each(ean_id,function($key,$val){
                ean = parseFloat(ean_qty)/count_ean_id;
                var pc = parseFloat(num_box)*ean;
                check[$val] = pc;
            })
        }else{
            ean = parseFloat(ean_qty)
            var pc = parseFloat(num_box)*ean;
            check[ean_id] = pc;
        }
        $.each($('.ean_id'),function(){
            const count_ean_id2 = $(this).val().split(',').length;
            if($(this).parent().parent().find('td:nth-child(1) select.select_itf').val() != itf_id){
                var id = $(this).val().split(',');
                var number_box = $(this).parent().parent().find('td:nth-child(4) input.number_box').val();
                var qty = $(this).parent().parent().find('input.ean_qty').val();
                if(count_ean_id2 > 1){
                    $.each($(this).val().split(','),function($key,$val){
                        var ean2 = parseFloat(qty)/count_ean_id2
                        var pc2 = parseFloat(number_box)*ean2;
                        if($val in check){
                            check[$val] += pc2;
                        }
                    })
                }else{
                    var ean2 = parseFloat(qty);
                    var pc2 = parseFloat(number_box)*ean2;
                    if(id in check){
                        check[id] += pc2;
                    }
                }
                // reCost($(this).parent().parent().find('td:nth-child(1) select.select_itf').val());
            }
        })
        var myJSON = JSON.stringify(check);
        $.ajax({
            url: FULLURL+'/checkpacking',
            method:'get',
            data: {check:myJSON,itf_id:itf_id,num_box:num_box},
            success:function(data){
                console.log(data);
                $.each(data.rs,function(k,v){
                    if(v == 'true' && data.rs_re[k] == 'true'){
                        console.log(data);
                        if(data.count[k] != 0){
                            $.get(FULLURL+'/getCost?id='+itf_id+'&num_box='+num_box)
                            .done(function(data){
                                console.log(data);
                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(data.cost.toFixed(4));

                                   $this.parent().parent().find('td:nth-child(5) input.itf_cost').val(data.cost.toFixed(4));


                            let profit=data.cost*rebateCall;
                            let itf_cal_selling=data.cost+profit;
                            $(".itf_cal_selling").val(itf_cal_selling.toFixed(4));

                            $this.parent().parent().find('td:nth-child(7) input.profit').val(parseInt(profit));
                     



                            let unitPrice;
                            let itfUnit=id;

                            if(itfUnit=='5')
                            {
                                unitPrice=itf_cal_selling;
                            }
                            else if(itfUnit=='2')
                            {
                                unitPrice=itf_cal_selling/qty;
                            }
                            else if(itfUnit=='1')
                            {
                                unitPrice=itf_cal_selling/ean_ppITF;
                            }
                            else
                            {
                                unitPrice=0;
                            }


let box= parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val());
let gw= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.gw_weight').val());;


    let itf_freight=box*gw;
   
 
       $this.parent().parent().find('td:nth-child(6) input.unit_price').val(parseInt(unitPrice));
       $this.parent().parent().find('td:nth-child(5) input.itf_freight').val(parseInt(itf_freight));

        let fixPrice=unitPrice/parseFloat($("#ex_rate").val());

                $this.parent().parent().parent().find('td:nth-child(5) input.fixPrice').val(fixPrice);;


  
       let itf_cost= $this.parent().parent().parent().find('td:nth-child(5) input.itf_cost').val();;
       let ex_rate= parseFloat($("#ex_rate").val());
       let profitP;
       let itf_fob=(fixPrice*qty*ex_rate)-itf_freight;

       if(id=='5')
        {
            profitP=((fixPrice*ex_rate)-itf_cost)/((itf_freight+itf_fob)/box);
        }
        else if(id=='2')
        {
            profitP=((fixPrice*ean_qty*ex_rate)-itf_cost)/((itf_freight+itf_fob)/box);

        }
        else if(id=='1')
        {
            profitP=((fixPrice*ean_qty*ex_rate)-itf_cost)/((itf_freight+itf_fob)/box);;
        }

 //alert("profitP : "+profitP+" fixPrice:"+fixPrice+" ean_qty:"+ean_qty+" ex_rate: "+ex_rate+" itf_cost:"+itf_cost+" itf_freight:"+itf_freight+" itf_fob:"+itf_fob+" box:"+box)

       $this.parent().parent().find('td:nth-child(5) input.profitP').val(profitP.toFixed(2));
let rebate=parseFloat($("#rebate").val());

  let itf_rebate=(rebate*unitPrice*qty);

       let profit2=itf_fob+itf_freight-(itf_cost+box);

       let itf_price=(itf_freight+itf_fob)/box;
       $this.parent().parent().find('td:nth-child(5) input.itf_fob').val(itf_fob.toFixed(4));
       $this.parent().parent().find('td:nth-child(5) input.profit2').val(profit2.toFixed(4));
       $this.parent().parent().find('td:nth-child(5) input.itf_rebate').val(itf_rebate.toFixed(4));
       $this.parent().parent().find('td:nth-child(5) input.itf_price').val(itf_price.toFixed(4));

        cal();
                        })
                       
                     }
                    }else{
                      
                        if(data.count[k] == 0 && parseFloat(data.sum[k]) == 0){
                            alert('ไม่มีสินค้าที่แพ็คแล้ว / No products have been packed.')
                            $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');
                            $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
                            $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
                            $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                            $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                            $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                            $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                        }
                   
                        $.each(data.count_re,function(key,val){
                            if(val == 0 && parseFloat(data.sum_re[key]) == 0){
                                alert('ไม่มีส่วนประกอบ / No product setup.')
                                $this.parent().parent().find('td:nth-child(1) select.select_itf').val(null).trigger('change');
                                $this.parent().parent().find('td:nth-child(2) input.qty').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.ean_id').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.ean_qty').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.net_weight').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.new_weight').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.maxcbm').val(null);
                                $this.parent().parent().find('td:nth-child(2) input.maxpallet').val(null);
                                $this.parent().parent().find('td:nth-child(3) select.unitcount').val(null);
                                $this.parent().parent().find('td:nth-child(4) input.number_box').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.nw').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.cbm').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.pallet').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.price_allocation').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_clearance_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_transport_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.itf_cost_price').val(null);
                                $this.parent().parent().find('td:nth-child(5) input.freight_rate').val(null);
                                $this.parent().parent().find('td:nth-child(6) input.unit_price').val(null);
                            }
                     
                        })
                    }
                })
            }
        })
        $.each($('input.number_box'),function(){
            const box = parseFloat($(this).val());
            total_box += box;
        })
        $('#span_box').html(total_box);
        $('#total_box').val(total_box);
    
        $.each($('input.nw'),function(){
            const nw = parseFloat($(this).val());
            total_nw += nw;
        })
        $('#span_nw').html(total_nw.toFixed(2));
        $('#total_nw').val(total_nw.toFixed(2));
    }

    if(select_palletized == 'yes'){
        $.each($('input.pallet'),function(){
            const pallet = parseFloat($(this).val());
            palletized += pallet;
            const one = pallet/palletized;
            $('#palletized').val(Math.ceil(palletized));
            $('#span_palletized').html(Math.ceil(palletized));
            const total_pallet = parseFloat($('#palletized').val());
            const price_pallet = parseFloat($('#price_pallet').val());
            const two = total_pallet*price_pallet;
            const price_allocation = parseFloat(one)*parseFloat(two);
            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(Math.ceil(price_allocation));
            const qty = $(this).parent().parent().find('td:nth-child(2) input.qty').val();
            const allocation = $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val();
            const price_pallet_unit = parseFloat(allocation)/parseFloat(qty);
            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(price_pallet_unit.toFixed(4));

            const palletized_price = (price_pallet*total_pallet)/palletized;
            $('#palletized_price').val(palletized_price.toFixed(4));
        })

        $.each($('input.gw_weight'),function(){
            const pallet_weight = (parseFloat($('#weight_pallet').val())*parseFloat($('#palletized').val()))/parseFloat(palletized);
            const gw = parseFloat($(this).parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($(this).parent().parent().find('td:nth-child(2) input.new_weight').val());
            const gw_weight = parseFloat(gw)+(parseFloat($(this).parent().find('input.pallet').val())*parseFloat(pallet_weight))
            $(this).val(gw_weight.toFixed(2));
        })

        $.each($('input.itf_pallet_price'),function(){
            const palletized_price = parseFloat($('#palletized_price').val());
            const pallet = parseFloat($(this).parent().find('input.pallet').val());
            const itf_pallet_price = pallet*palletized_price;
            $(this).val(itf_pallet_price.toFixed(4));
        })

        $.each($('input.gw_weight'),function(){
            const gw_weight = parseFloat($(this).val());
            total_gw += gw_weight;
        })
        // const weight_pallet = parseFloat($('#weight_pallet').val());
        // const cal_gw = parseFloat(total_gw)+(parseFloat($('#palletized').val())*parseFloat(weight_pallet));
        $('#span_gw').html(total_gw.toFixed(2));
        $('#total_gw').val(total_gw.toFixed(2));
        
        $.each($('input.cbm'),function(){
            const cbm = parseFloat($(this).val());
            total_cbm += cbm;
        })
        const cbm_pallet = parseFloat($('#cbm_pallet').val());
        const cal_cbm = parseFloat(total_cbm)+(parseFloat($('#palletized').val())*parseFloat(cbm_pallet));
        $('#span_cbm').html(cal_cbm.toFixed(2));
        $('#total_cbm').val(cal_cbm.toFixed(2));
    }else{
        const gw_weight = parseFloat($this.parent().parent().find('td:nth-child(4) input.number_box').val())*parseFloat($this.parent().parent().find('td:nth-child(2) input.new_weight').val());
        $this.parent().parent().find('td:nth-child(5) input.gw_weight').val(gw_weight.toFixed(2));

        $.each($('input.maxpallet'),function(){
            $(this).parent().parent().find('td:nth-child(5) input.price_allocation').val(palletized);
            $(this).parent().parent().find('td:nth-child(5) input.price_pallet_unit').val(palletized);
            $(this).parent().parent().find('td:nth-child(5) input.itf_pallet_price').val(palletized);
        })
        
        $.each($('input.gw_weight'),function(){
            const gw_weight = parseFloat($(this).val());
            total_gw += gw_weight;
        })
        $('#span_gw').html(total_gw.toFixed(2));
        $('#total_gw').val(total_gw.toFixed(2));

        $.each($('input.cbm'),function(){
            const cbm = parseFloat($(this).val());
            total_cbm += cbm;
        })
        $('#span_cbm').html(total_cbm.toFixed(2));
        $('#total_cbm').val(total_cbm.toFixed(2));
    }


   
})

function cal()
{
    //alert();
    $("#myBtn").click();
    const time = $('#sorted_table tbody tr').length*1000;
    loading(time);
    const select_clearance = $('#select_clearance').val();

    let total_nw = $('#total_nw').val();
    let total_gw = $('#total_gw').val();
    let total_cbm = $('#total_cbm').val();
    let palletized = $('#palletized').val();
    let fob = 0;
    let total_all_cost = 0;
    let profit_before_rebate = 0;
    let profit_after_rebate = 0;


    let total_box=0;

 $("#Tbl tbody").html(" ");

     $.each($('.unitcount'),function()
            {
                var $this = $(this);
             let qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());


           let itfUnit= $(this).val();;
                let number_box= parseFloat($this.parent().parent().parent().find('td:nth-child(4) input.number_box').val());;
                let nw= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.nw').val());;
               
                let unit_price= parseFloat($this.parent().parent().parent().find('td:nth-child(6) input.unit_price').val());;
                let profit= parseFloat($this.parent().parent().parent().find('td:nth-child(7) input.profit').val());;
                let cost= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_cost_price').val());;
                let itf_cal_selling= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_cal_selling').val());;
                let gw_weight= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.gw_weight').val());;
                let cbm= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.cbm').val());;
                let itf_freight= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_freight').val());;
                let itf_fob= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_fob').val());;
                let profitP= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.profitP').val());;
                let profit2= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.profit2').val());;
                let itf_rebate= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_rebate').val());;
                let itf_price= parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_price').val());;
          
              
                 let fixPrice=unit_price/parseFloat($("#ex_rate").val());

                $this.parent().parent().parent().find('td:nth-child(5) input.fixPrice').val(fixPrice);;

                let str="<tr><td>"+qty+"</td><td>"+itfUnit+"</td><td>"+number_box+"</td><td>"+nw+"</td><td>"+fixPrice+"</td><td>"+unit_price+"</td><td>"+profitP+"% </td><td>"+cost+"</td><td>"+profit+"</td><td>"+itf_cal_selling+"</td><td>"+gw_weight+"</td><td>"+cbm+"</td><td>"+itf_freight+"</td><td>"+itf_fob+"</td><td>"+profit2+"</td><td>"+itf_rebate+"</td><td>"+itf_price+"</td></tr>";
             
              
             total_box+=number_box;
           $("#Tbl tbody").append(str);
      


            })



}

$(document).on('change','.unit_price',function(){
    var $this = $(this);    
    const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());
    
    const total_itf_cost = parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.total_itf_cost').val());
    const itf_freight_rate = parseFloat($this.parent().parent().parent().find('td:nth-child(5) input.itf_freight_rate').val());
    const unit_price = parseFloat($this.val());
    const ex_rate = parseFloat($('#ex_rate').val())
    let rebate = parseFloat($('#rebate').val())
    const profit = ((unit_price*ex_rate*qty)-total_itf_cost)/total_itf_cost*100;
    var rebateCall=((0.0198*(rebate*rebate))+(0.7901*rebate)+1.34)/100;
    $("#rebateCal").val(rebateCall.toFixed(4));

    alert(rebateCal)
    $this.parent().parent().parent().find('td:nth-child(7) input.profit').val(profit.toFixed(2));



    const fob_th = (unit_price*ex_rate*qty)-itf_freight_rate;
    $this.parent().parent().parent().find('td:nth-child(7) input.fob').val(fob_th.toFixed(4));

    let fob = 0;
    let total_all_cost = 0;
    let profit_before_rebate = 0;
    let profit_after_rebate = 0;
    setTimeout(function(){
        $.each($('.unit_price'),function(){
            var $this = $(this);
            const unit_price = parseFloat($this.val());
            const qty = parseFloat($this.parent().parent().parent().find('td:nth-child(2) input.qty').val());
            const ex_rate = parseFloat($('#ex_rate').val())
            fob += unit_price*ex_rate*qty;
        })
        const total_fob = fob-$('#total_freight').val();
        $('#span_fob').text(total_fob.toFixed(2));
        $('#total_fob').val(total_fob.toFixed(2));
        $.each($('.total_itf_cost'),function(){
            var $this = $(this);
            const total_itf_cost = parseFloat($this.val());
            total_all_cost += total_itf_cost;
        })
        profit_before_rebate = fob-total_all_cost;
        $('#span_pro_before_rebate').text(profit_before_rebate.toFixed(2));
        $('#total_pro_before_rebate').val(profit_before_rebate.toFixed(2));
    },1000)
    setTimeout(function(){
        if($('#total_pro_before_rebate').val() != ''){
            const rebate = parseFloat($('#rebate').val());
            if($('#rebate').val() != ''){
                profit_after_rebate = profit_before_rebate-(rebate/100*fob);
                $('#span_pro_after_rebate').text(profit_after_rebate.toFixed(2));
                $('#total_pro_after_rebate').val(profit_after_rebate.toFixed(2));
                const profit_percent = profit_after_rebate/total_all_cost*100;
                $('#span_pro_percent').text(profit_percent.toFixed(2));
                $('#total_pro_percent').val(profit_percent.toFixed(2));
            }else{
                alert('กรุณากรอก Rebate แล้วกดคำนวณอีกครั้ง / Please enter Rebate then press calculate again')
            }
        }
    },1200)
})

function sum_array(input){       
    if(toString.call(input) !== "[object Array]")
        return false;
            
        var total =  0;
        for(var i=0;i<input.length;i++)
        {                  
            if(isNaN(input[i])){
            continue;
            }
            total += Number(input[i]);
        }
        return total;
}

function loading(time){
    swal.fire({
        title: 'Now loading',
        allowEscapeKey: false,
        allowOutsideClick: false,
        timer: time,
        onOpen: () => {
          swal.showLoading();
        }
    })
}